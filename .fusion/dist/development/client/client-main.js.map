{"version":3,"file":"client-main.js","sources":["/home/rook/repos/generate-password/main.js","/home/rook/repos/generate-password/src/generate.js","/home/rook/repos/password-manager/src/components/password-entry/index.js","/home/rook/repos/password-manager/src/main.js","/home/rook/repos/password-manager/src/pages/home.js","/home/rook/repos/password-manager/src/pages/pageNotFound.js","/home/rook/repos/password-manager/src/root.js"],"sourcesContent":["module.exports = require('./src/generate');\n","const smart_randomBytes = require(\"randombytes\");\n\nvar self = module.exports;\n\nconst RANDOM_BATCH_SIZE = 256;\n\nvar randomIndex;\nvar randomBytes;\n\nvar getNextRandomValue = function () {\n  if (randomIndex === undefined || randomIndex >= randomBytes.length) {\n    randomIndex = 0;\n    randomBytes = smart_randomBytes(RANDOM_BATCH_SIZE);\n  }\n\n  var result = randomBytes[randomIndex];\n  randomIndex += 1;\n\n  return result;\n};\n\n// Generates a random number\nvar randomNumber = function (max) {\n  // gives a number between 0 (inclusive) and max (exclusive)\n  var rand = getNextRandomValue();\n  while (rand >= 256 - (256 % max)) {\n    rand = getNextRandomValue();\n  }\n  return rand % max;\n};\n\n// Possible combinations\nvar lowercase = \"abcdefghijklmnopqrstuvwxyz\",\n  uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n  numbers = \"0123456789\",\n  symbols = '!@#$%^&*()+_-=}{[]|:;\"/?.><,`~',\n  similarCharacters = /[ilLI|`oO0]/g,\n  strictRules = [\n    { name: \"lowercase\", rule: /[a-z]/ },\n    { name: \"uppercase\", rule: /[A-Z]/ },\n    { name: \"numbers\", rule: /[0-9]/ },\n    { name: \"symbols\", rule: /[!@#$%^&*()+_\\-=}{[\\]|:;\"/?.><,`~]/ },\n  ];\n\nvar generate = function (options, pool) {\n  var password = \"\",\n    optionsLength = options.length,\n    poolLength = pool.length;\n\n  for (var i = 0; i < optionsLength; i++) {\n    password += pool[randomNumber(poolLength)];\n  }\n\n  if (options.strict) {\n    // Iterate over each rule, checking to see if the password works.\n    var fitsRules = strictRules.every(function (rule) {\n      // If the option is not checked, ignore it.\n      if (options[rule.name] == false) return true;\n\n      // Treat symbol differently if explicit string is provided\n      if (rule.name === \"symbols\" && typeof options[rule.name] === \"string\") {\n        // Create a regular expression from the provided symbols\n        var re = new RegExp(\"[\" + options[rule.name] + \"]\");\n        return re.test(password);\n      }\n\n      // Run the regex on the password and return whether\n      // or not it matches.\n      return rule.rule.test(password);\n    });\n\n    // If it doesn't fit the rules, generate a new one (recursion).\n    if (!fitsRules) return generate(options, pool);\n  }\n\n  return password;\n};\n\n// Generate a random password.\nself.generate = function (options) {\n  // Set defaults.\n  options = options || {};\n  if (!Object.prototype.hasOwnProperty.call(options, \"length\"))\n    options.length = 10;\n  if (!Object.prototype.hasOwnProperty.call(options, \"numbers\"))\n    options.numbers = false;\n  if (!Object.prototype.hasOwnProperty.call(options, \"symbols\"))\n    options.symbols = false;\n  if (!Object.prototype.hasOwnProperty.call(options, \"exclude\"))\n    options.exclude = \"\";\n  if (!Object.prototype.hasOwnProperty.call(options, \"uppercase\"))\n    options.uppercase = true;\n  if (!Object.prototype.hasOwnProperty.call(options, \"lowercase\"))\n    options.lowercase = true;\n  if (\n    !Object.prototype.hasOwnProperty.call(options, \"excludeSimilarCharacters\")\n  )\n    options.excludeSimilarCharacters = false;\n  if (!Object.prototype.hasOwnProperty.call(options, \"strict\"))\n    options.strict = false;\n\n  if (options.strict) {\n    var minStrictLength =\n      1 +\n      (options.numbers ? 1 : 0) +\n      (options.symbols ? 1 : 0) +\n      (options.uppercase ? 1 : 0);\n    if (minStrictLength > options.length) {\n      throw new TypeError(\"Length must correlate with strict guidelines\");\n    }\n  }\n\n  // Generate character pool\n  var pool = \"\";\n\n  // lowercase\n  if (options.lowercase) {\n    pool += lowercase;\n  }\n\n  // uppercase\n  if (options.uppercase) {\n    pool += uppercase;\n  }\n  // numbers\n  if (options.numbers) {\n    pool += numbers;\n  }\n  // symbols\n  if (options.symbols) {\n    if (typeof options.symbols === \"string\") {\n      pool += options.symbols;\n    } else {\n      pool += symbols;\n    }\n  }\n\n  // Throw error if pool is empty.\n  if (!pool) {\n    throw new TypeError(\"At least one rule for pools must be true\");\n  }\n\n  // similar characters\n  if (options.excludeSimilarCharacters) {\n    pool = pool.replace(similarCharacters, \"\");\n  }\n\n  // excludes characters from the pool\n  var i = options.exclude.length;\n  while (i--) {\n    pool = pool.replace(options.exclude[i], \"\");\n  }\n\n  var password = generate(options, pool);\n\n  return password;\n};\n\n// Generates multiple passwords at once with the same options.\nself.generateMultiple = function (amount, options) {\n  var passwords = [];\n\n  for (var i = 0; i < amount; i++) {\n    passwords[i] = self.generate(options);\n  }\n\n  return passwords;\n};\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { FormControl } from \"baseui/form-control\";\nimport { Input } from \"baseui/input\";\nimport { Slider } from \"baseui/slider\";\nimport { Checkbox } from \"baseui/checkbox\";\nimport { ProgressBar } from \"baseui/progress-bar\";\nimport { ProgressSteps, NumberedStep } from \"baseui/progress-steps\";\nimport { generate as generatePassword } from \"generate-password\";\nimport zxcvbn from \"zxcvbn\";\n\nconst MAXLENGTH = 64;\nconst MINLENGTH = 4;\n\nexport default () => {\n  const [length, setLength] = useState(~~(MAXLENGTH / 2));\n  const [uppercase, setUppercase] = useState(false);\n  const [numbers, setNumbers] = useState(false);\n  const [symbols, setSymbols] = useState(false);\n  const [copied, setCopied] = useState(false);\n  const [strength, setStrength] = useState(null);\n  let [password, setPassword] = React.useState(\"\");\n\n  const setNewPassword = (p) => {\n    const newPassword =\n      typeof p === \"string\"\n        ? p\n        : generatePassword({ length, numbers, uppercase, symbols });\n\n    const obj = zxcvbn(newPassword);\n    setStrength(obj.score);\n    setCopied(false);\n    setPassword(newPassword);\n  };\n\n  useEffect(() => {\n    setNewPassword();\n  }, [length, uppercase, symbols, numbers]);\n\n  const textStrength = {\n    0: \"BAD\",\n    1: \"WEAK\",\n    2: \"BETTER\",\n    3: \"STRONG\",\n    4: \"STRONGEST\",\n  };\n  return (\n    <div>\n      <FormControl\n        label={() => \"Password\"}\n        caption={() => \"Choose a strong password\"}\n      >\n        <Input\n          value={password}\n          onChange={(e) => {\n            setNewPassword(e.target.value);\n          }}\n          type=\"password\"\n          clearable\n          clearOnEscape\n        />\n      </FormControl>\n      <div>\n        <ProgressBar value={strength} successValue={4} />\n        {textStrength[strength]}\n      </div>\n\n      <Slider\n        min={MINLENGTH}\n        max={MAXLENGTH}\n        value={[length]}\n        onChange={({ value }) => setLength(value[0])}\n      />\n      <FormControl label=\"Characters\">\n        <div>\n          <Checkbox\n            checked={uppercase}\n            onChange={() => setUppercase(!uppercase)}\n          >\n            A-Z\n          </Checkbox>\n          <Checkbox checked={numbers} onChange={() => setNumbers(!numbers)}>\n            0-9\n          </Checkbox>\n          <Checkbox checked={symbols} onChange={() => setSymbols(!symbols)}>\n            %@#\n          </Checkbox>\n        </div>\n      </FormControl>\n    </div>\n  );\n};\n","// @flow\nimport App from 'fusion-react';\nimport Router from 'fusion-plugin-react-router';\nimport Styletron from 'fusion-plugin-styletron-react';\n\nimport root from './root.js';\n\nexport default () => {\n  const app = new App(root);\n  app.register(Styletron);\n  app.register(Router);\n  return app;\n};\n","// @flow\nimport React from \"react\";\n\nimport { styled } from \"fusion-plugin-styletron-react\";\nimport PasswordEntry from \"../components/password-entry\";\n\nconst Home = () => {\n  const [value, setValue] = React.useState([10]);\n\n  return (\n    <div>\n      <h2>Password Manager</h2>\n      <PasswordEntry />\n    </div>\n  );\n};\n\nexport default Home;\n","// @flow\nimport React from 'react';\nimport {NotFound} from 'fusion-plugin-react-router';\n\nconst PageNotFound = () => (\n  <NotFound>\n    <div>404</div>\n  </NotFound>\n);\n\nexport default PageNotFound;\n","// @flow\nimport React from 'react';\nimport {Route, Switch} from 'fusion-plugin-react-router';\n\nimport Home from './pages/home.js';\nimport PageNotFound from './pages/pageNotFound.js';\n\nconst root = (\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n    <Route component={PageNotFound} />\n  </Switch>\n);\n\nexport default root;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AADA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACXA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;;;;;;;;;ACTA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;;;;;;;A","sourceRoot":""}